<?xml version="1.0"?>
<!--
  Robot model adapted from https://github.com/CIR-KIT/steer_drive_ros/blob/kinetic-devel/steer_drive_controller/test/common/urdf/steerbot.xacro

  Modifications:
    Remove base_footprint link. Useful for navigation but not necessary for a simple example.
    Added materials for URDF
    Updated inertials

  Geometry:
    The Ackermann steering controllers require the longitudinal
    separation between the front and back wheel axes and the
    lateral separation between the left and right front steering axes.
    
    For this model:
    wheel_separation_h = base_length - 2 * axle_offset = 0.4
    wheel_separation_w = base_width  + 2 * axle_offset = 0.4
-->
<robot name="steer_bot" xmlns:xacro="http://wiki.ros.org/xacro">
  <!-- Include xacro for inertials, materials and wheels -->
  <xacro:include filename="$(find steer_bot_description)/urdf/wheel.xacro"/>

  <xacro:property name="robot_namespace" value="/steer_bot"/>

  <!-- Gazebo plugins -->
  <gazebo>
    <!-- Load ros_control plugin using the steer_bot_hardware_gazebo
    implementation of the hardware_interface::RobotHW -->
    <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
      <robotNamespace>${robot_namespace}</robotNamespace>
      <robotSimType>steer_bot_hardware_gazebo/SteerBotHardwareGazebo</robotSimType>
      <legacyModeNS>false</legacyModeNS>
    </plugin>
  </gazebo>

  <!-- Math constants -->
  <xacro:property name="deg_to_rad" value="0.01745329251994329577"/>

  <!-- Robot base dimensions -->
  <xacro:property name="base_length" value="0.5" /> 
  <xacro:property name="base_width" value="0.3" /> 
  <xacro:property name="base_height" value="0.1" /> 
  <xacro:property name="base_mass" value="5" /> 

  <!-- Wheel link dimensions -->
  <xacro:property name="wheel_radius" value="0.1" />
  <xacro:property name="wheel_thickness" value="0.08" />
  <xacro:property name="wheel_mass" value="1" />

  <!-- Steering link dimensions -->
  <xacro:property name="steer_radius" value="0.05" />
  <xacro:property name="steer_thickness" value="0.02" />
  <xacro:property name="steer_mass" value="1" />

  <!-- Axle positions -->
  <xacro:property name="axle_offset" value="0.05" />
  <xacro:property name="steer_offset" value="0.02" />

  <!-- Base link -->
  <link name="base_link">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="${base_length} ${base_width} ${base_height}"/>
      </geometry>
      <material name="green" />
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <box size="${base_length} ${base_width} ${base_height}"/>
      </geometry>
    </collision>
    <!--<xacro:solid_cuboid_inertial 
        rpy="0 0 0" xyz="0 0 0"
        mass="${base_mass}"
        x="${base_length}" y="${base_width}" z="${base_height}" />-->
  </link>

  <!-- Front steer and rear wheel joints required for ackermann_steering_controller -->
  <xacro:front_steer
    name="front"
    parent="base"
    steer_radius="${steer_radius}"
    steer_thickness="${steer_thickness}" 
    steer_mass="${steer_mass}" 
    base_length="${base_length}"
    base_width="${base_width}"
    axle_offset="${axle_offset}"
    steer_height="${wheel_radius+steer_offset}">
  </xacro:front_steer>

  <xacro:rear_wheel
    name="rear"
    parent="base"
    wheel_radius="${wheel_radius/4}"
    wheel_thickness="${wheel_thickness/2}"
    wheel_mass="${wheel_mass/32}">
    <origin xyz="${-base_length/2+axle_offset} 0 0" rpy="${-90 * deg_to_rad} 0 0"/>
  </xacro:rear_wheel>

  <!-- Steerable front wheels -->
  <xacro:front_wheel_lr 
    name="front_right"
    parent="base"
    reflect="-1"
    wheel_radius="${wheel_radius}"
    wheel_thickness="${wheel_thickness}" 
    wheel_mass="${wheel_mass}" 
    steer_radius="${steer_radius}"
    steer_thickness="${steer_thickness}" 
    steer_mass="${steer_mass}" 
    base_length="${base_length}"
    base_width="${base_width}"
    axle_offset="${axle_offset}"
    steer_height="${wheel_radius+steer_offset}">
  </xacro:front_wheel_lr>
  <xacro:front_wheel_lr
    name="front_left"
    parent="base"
    reflect="1"
    wheel_radius="${wheel_radius}"
    wheel_thickness="${wheel_thickness}"
    wheel_mass="${wheel_mass}" 
    steer_radius="${steer_radius}"
    steer_thickness="${steer_thickness}" 
    steer_mass="${steer_mass}" 
    base_length="${base_length}"
    base_width="${base_width}"
    axle_offset="${axle_offset}"
    steer_height="${wheel_radius+steer_offset}">
  </xacro:front_wheel_lr>

  <!-- Rear wheels -->
  <xacro:rear_wheel_lr
    name="rear_right"
    parent="base"
    wheel_radius="${wheel_radius}"
    wheel_thickness="${wheel_thickness}"
    wheel_mass="${wheel_mass}">
    <origin xyz="${-base_length/2+axle_offset} ${-base_width/2-axle_offset} 0" rpy="${-90 * deg_to_rad} 0 0"/>
  </xacro:rear_wheel_lr>
  <xacro:rear_wheel_lr
    name="rear_left"
    parent="base"
    wheel_radius="${wheel_radius}"
    wheel_thickness="${wheel_thickness}"
    wheel_mass="${wheel_mass}">
    <origin xyz="${-base_length/2+axle_offset} ${+base_width/2+axle_offset} 0" rpy="${-90 * deg_to_rad} 0 0"/>
  </xacro:rear_wheel_lr>

  <link name="lidar">
    <inertial>
      <origin xyz="0 0 0.15" rpy="0 0 0"/>
      <mass value="1"/>
      <inertia ixx="100"  ixy="0"  ixz="0" iyy="100" iyz="0" izz="100" />
    </inertial>
    <visual>
      <origin xyz="0 0 0.15" rpy="0 0 0"/>
      <geometry>
        <cylinder length="0.055" radius="0.0508"/>
      </geometry>
      <!--<material name="red"/>-->
    </visual>
    <collision>
      <origin xyz="0 0 0.15" rpy="0 0 0"/>
      <geometry>
        <cylinder length="0.055" radius="0.0508"/>
      </geometry>
    </collision>
    </link>

    <link name="camera">
      <inertial>
        <origin xyz="0.2 0 0.1" rpy="0 0 0"/>
        <mass value="0.25"/>
        <inertia ixx="100"  ixy="0"  ixz="0" iyy="100" iyz="0" izz="100" />
      </inertial>
      <visual>
        <origin xyz="0.2 0 0.1" rpy="0 0 0"/>
        <geometry>
          <box size="${steer_radius} ${steer_radius} ${steer_thickness}"/>
        </geometry>
        <!--<material name="red"/>-->
      </visual>
      <collision>
        <origin xyz="0.2 0 0.1" rpy="0 0 0"/>
        <geometry>
          <box size="${steer_radius} ${steer_radius} ${steer_thickness}"/>
        </geometry>
      </collision>
    </link>

    <joint name="lidar_joint" type="fixed">
      <parent link = "base_link"/>
      <child link = "lidar"/>
      <pose>-0.032 0 0.171 0 0 0</pose>
      <axis>
        <xyz>0 0 1</xyz>
        <use_parent_model_frame>false</use_parent_model_frame>
      </axis>
      <limit effort="${steer_effort}"
             lower="0" upper="0"
             velocity="${steer_velocity}"/>
    </joint>

    <joint name="camera_joint" type="fixed">
      <parent link = "base_link"/>
      <child link = "camera"/>
      <pose>0.2 0 0.171 0 0 0</pose>
      <axis>
        <xyz>0 0 1</xyz>
        <use_parent_model_frame>true</use_parent_model_frame>
      </axis>
      <!--<limit effort="${steer_effort}"
             lower="0" upper="0"
             velocity="${steer_velocity}"/>-->
    </joint>

  <!-- Colour -->
  <gazebo reference="base_link">
    <material>Gazebo/Grey</material>
  </gazebo>

  <gazebo reference="lidar">
    <material>Gazebo/RedGlow</material>
    <sensor name="laser" type="ray">
        <parent link="lidar"/>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <pose> 0 0 0.1 0 0 0 </pose>
        <axis>
          <xyz>0 0 1</xyz>
          <use_parent_model_frame>true</use_parent_model_frame>
        </axis>
        <visualize>true</visualize>
        <update_rate>10</update_rate>
        <ray> 
          <scan>
              <horizontal>
                  <samples>360</samples>
                  <min_angle>-3.14</min_angle>
                  <max_angle>3.14</max_angle>
              </horizontal>
          </scan>
          <range>
              <min>0.3</min>
              <max>12</max>
          </range>       
        </ray>
        <!--laser_controller libgazebo_ros_ray_sensor.so!-->
        <plugin name="ros_ray_sensor_controller" filename="libgazebo_ros_laser.so">
            <output_type>sensor_msgs/LaserScan</output_type>
            <frameName>lidar</frameName>
            <topicName>/scan</topicName>
        </plugin>
    </sensor>
  </gazebo>

  <gazebo reference="camera">
    <material>Gazebo/BlueGlow</material>
    <sensor type="camera" name="camera1">
      <!--<origin xyz="0.25 0 0.1" rpy="0 0 0"/>-->
      <pose> 0.25 0 0.3 0 0 0 </pose>
      <!--<axis>
          <xyz>0 0 1</xyz>
          <use_parent_model_frame>true</use_parent_model_frame>
      </axis>-->
      <visualize>true</visualize>
      <update_rate>30.0</update_rate>
      <camera>
        <horizontal_fov>1.3962634</horizontal_fov>
        <image>
          <width>800</width>
          <height>800</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>1</near>
          <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin name="camera1_camera_controller" filename="libgazebo_ros_camera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>30.0</updateRate>
        <imageTopicName>/camera1/image_raw</imageTopicName>
        <cameraInfoTopicName>/camera1/camera_info</cameraInfoTopicName>
        <frameName>camera</frameName>
        <hackBaseline>0.2</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>

</robot>
